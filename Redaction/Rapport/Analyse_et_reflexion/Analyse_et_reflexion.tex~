% !TEX encoding = UTF-8 Unicode
% !TEX root = ../rapport.tex

\chapter{Analye et reflexion}\label{Analyse_et_reflexion}

\section{Modélisation des Réseaux de Capteurs sans fil}

\subsection{Modèle de base}

\begin{figure}[h]
\centering
\includegraphics[scale=0.9]{Etat_de_l'art/source/layer.pdf}
\caption{\label{Layer} Les couches dans les WSNs}
\end{figure}

Pour l'étude et la conception d'algorithmes dans les réseaux de capteurs sans fil (WSN), il est indispensable de définir le problème précis, d'établir un cadre rigoureux, formel et sans ambiguïtés. Au vue de la figure \ref{Layer}, 
notre étude se placera dans la couche 'Broadcast Protocols'. Nous ne développerons pas la couche MAC ni la couche application.\\
Differents modéles sont possibles:\\

La modélisation de base des réseaux de capteurs sans fil \textbf{$M_1$}:
\begin{itemize}
 \item \textit{Uniforme.} Tout les capteurs sont identiques (batterie, portée, capacité de calcul..).
 \item \textit{Connexe.} Le réseau est initialement connexe (chaque capteur est lié directement ou indirectement à tout les autres).
 \item \textit{Plan} Dans un plan euclidien à deux dimensions (distance euclidienne).
 \item \textit{Statique.} Sans mobilité des capteurs : nous supposerons que les capteurs sont immobiles.
 \item \textit{Sans ajout de capteurs.} Le réseau comprend un nombre fixe de capteurs $n$. Aucun ajout de capteurs en cours de fonctionnement n'est possible.
 \item \textit{Transmition.} Dans des conditions de transmission de message idéale: aucune interférence entre les messages, pas de perturbations des ondes, système d'identifiants unique.
 \item \textit{Fiabilité.} Les capteurs sont fiables, aucunes pannes ne sont possibles.
 \item \textit{Energie.} Chaque capteur a une énergie initiale $\beta$ donnée.Un modele décrit la consomation energetique. Un capteur est éliminé lorsqu'il n'a plus d'énergie ou que son énergie 
 restante ne permet plus aucun envoi de message. 
 \item \textit{Egalité.} Chaque site peut a tout moment debuter une procedure de broadcast. Une loi de probabilité modélise 
 ce phénomène(loi de poisson).
 \item \textit{Position.} Chaque site connait sa position absolue.  \\
\end{itemize}

  D'autres modeles plus complexes mais plus réaliste prennent en compte:
  
\begin{itemize}
   
 \item L'ajout de capteurs: le réseau comprend un nombre variable de capteurs $n$. Les ajouts de capteurs en cours de fonctionnement sont possibles.
 \item Les capteurs peuvent tomber en panne en raisons de divers facteurs. Une loi de probabilité modélise ce phénomène.   
 \item La mobilité des capteurs. La position de chaque capteur varie au cours du temps.
 \item Les capteur ne sont pas forcement identiques (batterie, portée, capacité de calcul, connaissance du reseau...).
 \item Espace en 3 dimensions.
 \item Interferences radio.
 \item Modele de consommation energetique complexe.
 \item ...
\end{itemize}

  Dans le cadre de notre travail d'étude et de recherche, nous resterons sauf mention du contraire dans la modélisation $M_1$ avec pour modèle énergétique celui décrit ci-dessous.\\
  \paragraph*{} Un WSN peut être représenté par un graphe $G= (V,E,\gamma)$ ou $V$ est un ensemble de noeuds (capteurs), $\gamma$ le rayon d'émission maximum et $E \subseteq V \textsuperscript{2}$ l'ensemble des arêtes représentant les communications possibles entre les capteurs: $(u,v)$ appartient à $E$ signifie que $u$ peut envoyer un  message à $v$. On note $ n=|V| $ la taille du WSN. En fait les éléments de E dépendent de la
 position des capteurs ainsi que de leur portée. Nous supposerons que tout les capteurs ont la même portée maximale notée $\gamma$. 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  Distance

\begin{mydef}
Nous noterons $ij$ l'arête allant de $i$ à $j$. \\
Nous noterons $d_e(u,v)$ la \textit{distance euclidienne} dans $\mathbb{R} \textsuperscript{2}$ entre $u$ et $v$:
$$E = \{ (u,v) \in V ^{2} \mid d(u,v) \leq \gamma \}$$
Nous noterons $d_G(u,v)$ la \textit{distance} entre $ u $ et $ v $ : $d_G(u,v)= \min\limits_{k \in \mathbb{N}}(k \mid v \in N_k(u))$
\end{mydef}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   Graphe unité
\begin{mydef}
 On appelera $G= (V,E,\gamma)$ le \textit{graphe unité} du WSN et $\gamma$ son rayon de communication.
\end{mydef}



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   Voisinage
\begin{mydef}
Nous noterons le 1-voisinage de $u$ : $N_1(u) = \{ v \in V  \mid (u,v) \in E \}$ \\
Nous noterons le 2-voisinage de $u$ : $N_2(u) = \{ v \in V \mid  \exists w \in V :\{(u,w);(w,v)\} \in E ^2\}$ \\
Nous noterons le $k$-voisinage de $u$, $k \in \mathbb{N} : N_k(u) = \{ v \in V  \mid \exists $ un chemin $c (u,v): |c| \leq k\}$  Nous parlerons de 1- 2- et k-voisins de $i$ pour désigner des noeuds appartenant respectivement
 à $N_1(i), N_2(i),N_k(i)$. \\
Soit $A \subseteq V$, on note $N(A) = \{ v \in V\textbackslash  A \mid \forall u\in A,(u,v) \in E \}$ \\
Le degré de $ u $ est le nombre  $N(u)=|N_1(u)|$.\\
\end{mydef}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   Diametre
\begin{mydef}
Nous noterons $diametre_G= \max\limits_{i,j\in \textlbrackdbl 1,n \textrbrackdbl,i<j} (d_G(i,j))$.
\end{mydef}
 

\begin{figure}[H]
\centering
\includegraphics[scale=0.5]{Etat_de_l'art/source/graph1.png}
\caption{Graphe unité}
\end{figure} 



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  Densité, distance moyenne
\begin{mydef}
 
 Le degré de $G$ est la moyenne des degrés:$$N_G=\sum_{i=1}^n{\frac1n N(i)}$$\\
 La densite de $G$ est le nombre $D_G=N_G/diametre_G$\\
 La distance de $G$ est la moyenne des distances entre toutes paires de sommets:$$d_G=\sum_{i,j\in \textlbrackdbl 1,n \textrbrackdbl,i<j}{\frac1n d_G(i,j)}$$
 La distance euclidienne de $G$ est la moyenne des distances euclidienne entre toutes paires de sommets:$$d_e(G)=\sum_{i,j\in \textlbrackdbl 1,n \textrbrackdbl,i<j}{\frac1n d_e1(i,j)}$$

\end{mydef}

\subsection{Broadcast}

Dans un WSN $G(V,E,\gamma)$, deux capteurs peuvent communiquer directment uniquement si ils sont 1-voisins dans G.
A cause de la perte de propagation des messages, le rayon de transmition est relativement limité, c'est pourquoi les communications doivent se faire par multi-sauts, parfois meme si le destinataire est a distance 1 dans le graphe 
unité(pour des raison énergetiques). Pour établir une connection entre deux noeud non voisins, les messages doivent effectues des sauts via des noeuds intermediaires. Dans un large WSN, il est bien trop difficile pour un capteur voulant
transmettre un message à un autre de trouver une route, à cause de l'absence d'infrastructures. 
La procédure de Broadcast est un mécanisme fondamentale pour la propagation des données ainsi que pour la decouverte de route. C'est pourquoi, concevoir des algorithmes efficaces et economes en énergie est un probleme primordial 
dans les WSN. 

\subsection{Modèle énergétique}
\subsubsection{Energie d'un capteur}
Dans \cite{Dong2005}, Dong présente les deux modéles de consommation énergétique communement utilisés.
\paragraph{The Packet based model.}
Nous utiliserons pour notre analyse le modele de connsomation d'énergie idéale suivant:
Nous considèrerons que chaque capteur $i$ a une énergie initiale $E_{init}=\beta$.
L'envoie de message est le seul facteur de perte d'energie. L'energie consommée lors de la reception de message, l'aquisition et traitement des informations sera considérée comme négligeable.
Tous les capteurs $i$ offrant les mêmes caractéristiques, ils peuvent modifier leur rayon d'émission $r_i$ entre $r_i=0$ et $r_i=\gamma$.
Nous noterons $E_i$ l'énergie restante de $i$.
L'envoie d'un message de $i$ avec un rayon $r$ coute $$ E(r)= \begin{cases} r^\alpha + c & \text{si }i\neq j \\ 0 & \text{sinon}  \end{cases}$$
L'envoi d'un message de $i$ à $j$ ($d_e(i,j)\leq \gamma$) coûte  $ E_{ij}=E(d_e(i,j))$.

\paragraph{The Time based model}
Cependant,un autre modéle plus realiste prend en compte l'energie de reception des message, de traitement ainsi que d'ecoute inactive du réseau (mode veille).
En effet, dans \cite{Kasten2001}, Kasten souligne le fait que souvent, la reception,l'ecoute et le traitement consomme en moyenne autant d'energie que la transmition de message.
Dans de nombreuse topologie, si la fréquence des broadcast est faible, beaucoup de capteurs vont etre a cours d'énergie avant meme d'avoir pu transmettre des messages.
Dans beaucoup d'application, la densité du reseau etant élevée, le cout propre aux transmitions de message est relativement faible tandis que le cout de reception des message est elevé puisque chaque capteur traite les message de son voisinage
qui en l'occurence est grand.



\paragraph{Energie globale}
\begin{mydef}
 L'énergie potentielle de G est la somme des énergies des capteurs :$$E_G=\sum_{i=1}^n{E_i}$$
 La consommation de  G est :$$C_G=n\beta - E_G$$
 Le coût moyen de transmition de  G est :$$c_G=E(d_e(G))$$
 Le cout moyen d'un broadcast est $C(1)$.\\
 Le cout moyen de $k$ broadcast est $C(k)$


\end{mydef}

\subsection{Initialisation et mise à jour d'un capteur}
Un capteur 'prend naissance', c'est à dire débute son activité dès qu'il est en place dans le réseaux et ce automatiquement. Deux choix sont possibles: soit le capteur est immédiatement opérationel soit il nécessite une phase 
d'initialisation. Il existe donc deux type d'algorithmes: sans balisage (beaconless) et avec balisage. Les algorithmes 'beaconless' ne nécessitent pas de phase d'initialisation ni de mise à jour. Les nouveaux capteurs sont immédiatement 
opérationels mais n'ont aucune connaissance de leur environnement et notement de leur voisinage dans G. Dans les algorithmes avec balisage, tout capteur, lorsqu'il 'prend naissance' commence par une procédure d'initialisation et stocke en 
mémoire un certain nombre d'informations(voisins,groupe,topologie locale...). Au cour de l'algorithme, chaque noeud met périodiquement à jour ces informations. Pour ce faire chaque site envoie regulierement a ses voisins un message de type
'Hello' contenant par exemple son Id, sa position, sa dominante connexe, son degres, ses voisins, etc.\\
 

Quelle type d'informations est utilisée dans l'algorithme: informations globale du reseau ou informations locales? La distinction entre global est local n'est pas toujours évidente. Des algorithmes centralisés peuvent etre implémentés
 d'une maniere distribuée en décidant par exemple d'un noeud possedant la connaissance globale du réseau.Sinon, au travers d'un échange séquentiel d'informations tres localisées (1 ou 2-voisinage par exemple), chaque noeud peut combiner sa 
connaissance avec celle de ses voisins et ainsi obtenir une vision globale du réseau. Cepandant, une telle phase de propagation coute tres cher en terme de nombre de messages échangés et de temps.
Si le reseau est dynamique (mobilité des capteurs), maintenir une connaissance locale du reseau devient plus complexe tandis que tenir a jour la topologie globale de celui-ci devient impossible par le moyen cité précedement.Ainsi, 
la quantité et la nature des informations nécessaire au déroulement de l'algorithme sont une bonne mesure de la capacité d'adaptation du protocol à un environement dynamique.   

\begin{enumerate}
 \item \textbf{Global}:         protocol de broadcast, centralisé ou distribué nécessitant une connaissance globale du reseau(ex: BIP).
 \item \textbf{Quasi-global}:   protocol distribué de broadcast nécessitant une connaissance quasi-globale du reseau.
 \item \textbf{Quasi-local}:    protocol distribué nécessitant une connaissance du réseau principalement locale et occasionellement globale.
(ex: Cluster networks: tandis que les groupes peuvent etres construits de maniere locale , des reactions en chaines peuvent arrivées).
 \item \textbf{Local}: 		protocol distribué nécessitant une connaissance tres locale du réseau.Tout les algorithmes de 1 ou 2-voisinage appartienent à cette catégorie.
\end{enumerate}




\subsection{Duree de vie}
\subsubsection{Durée de vie du reseau, problématique}


Dans un reseau de capteur sans fil, la contrainte majeur est l'efficacité de l'algorithme utilisé en matiere de consommation énergétique.En effet la principale caracteristique des capteurs
est leur petite taille et leur micro-batterie. Dans la majeur partie des cas, remplacer les batteries est impossible. Cepandant la durée de vie d'un WSN est difficile à definir et a mesurer.
Il n'y a pas de définition absolue. Elle indique combien de temps le reseau sera 'efficace' par rapport a l'application donnée ( nombre de broadcastast effectué, connexité, pourcentage de noeuds vivants...)
Dans la litterature, deux approches apparaissent clairement en matiere de maximisation de la durée de vie des WSNs. Une approche indirecte consiste à minimmiser la consommation d'énergie de façon locale tandis que l'autre a pour but 
de maximiser la directement la durée de vie du reseau de façon plus global. Bien que l'approche indirecte peut améliorer la durée de vie du reseau, elle ne suffit pas à elle seul à appréhander le probleme de la durée de vie.
Parmis ces approches figurent  par exemple le fait de maximiser le nombre de broadcasts effectués avant qu'un capteur ne meurt.

Dans \cite{Liang2002}, Liang prouve que le  probleme THE MINIMUM-ENERGY BROADCAST
TREE PROBLEM est NP-complet par reduction à (3-CNF SAT):
\begin{myth}
Soient un WSN $G$ dans lequel chaque noeud a $k$ rayons de transmition possibles, une source $s$ et un entier positif $w$.
Determiner si il existe un abre de broadcast de source $s$ tel que la somme des couts de transmition aux noeuds relais (qui ne sont pas des feuilles) soit inferieur à $w$ est NP-Complet.
\end{myth}
Ainsi, pour un broadcast donnée il n'existe pas d'algorithme centralisé polynomiale pour trouver l'abre de diffusion optimale. Il est evident qu'il n'en existe pas de distribués. 
Dans \cite{Dong2005}, Dong prouve que le  probleme BROADCAST LIFETIME est NP-Complet par reduction de (3DM):
\begin{myth}
Soient un WSN $G$, une source $s$ et un entier positif $k$.
Determiner si G a assez d'énergie pour broadcaster $k$ messages a partir de $s$ est NP-Complet.
\end{myth}

De façon formel, il est donc souvent impossible de calculer le nombre de broadcasts total reussis étant donné un reseau et un protocol (sauf quand le protocol est tres simple $cf$ 3.2.1). Nous analyserons 
donc \textit{les performences moyennes} des algorithmes quand cela est possible. Sinon, les simulations nous permettrons de mesurer les performences en fonction de différentes topologies.

\subsubsection{Differentes définitions}
Les definitions et critères de durée de vie d'un WSN sont tirés des articles \cite{Dietrich2009},\cite{Champ2009lifetime},\cite{Elleithy2011}. 

\begin{mydef}
Nous notons $\lambda$-broadcast un broadcast touchant $\lambda$ pourcent des noeuds encore en vie. Nous ecrirons broadcast pour parler de $1$-broadcast.
\end{mydef}

\begin{mylt}
Nombre moyen de broadcast reussis avant qu'un capteur n'ai plus de batterie (TTFF).
\end{mylt}
\begin{mylt}
Nombre moyen de broadcast reussis avant que le reseau ne perde sa connectivité.
\end{mylt}
\begin{mylt}
Nombre moyen de broadcast reussis jusqu'à ce qu'il ne reste $X$ pourcent de noeuds vivants.
\end{mylt}
\begin{mylt}
Le nombre 
\end{mylt}



{%
\newcommand{\mc}[3]{\multicolumn{#1}{#2}{#3}}
\begin{center}
\begin{tabular}{|c|l}\cline{1-1}
\mc{2}{c}{\textbf{Notations}}\\\hline
$G(V,E,\gamma)$ & \mc{1}{c|}{Graphe unité}\\\hline
$n$ & \mc{1}{c|}{Nombre de capteur}\\\hline
$\gamma$ & \mc{1}{c|}{Rayon d'émission maximum}\\\hline
$\alpha$ & \mc{1}{c|}{Constante de consommation énergetique}\\\hline
$c$ & \mc{1}{c|}{Constante de consommation énergetique}\\\hline
$\beta$ & \mc{1}{c|}{Energie initiale des capteur}\\\hline
$E_i$ & \mc{1}{c|}{Energie restante de $i$}\\\hline
$E_{ij}$ & \mc{1}{c|}{Cout d'envoie d'un message de $i$ à $j$}\\\hline
$N(u) $& \mc{1}{c|}{Degre de u}\\\hline
$d_G(i,j)$ & \mc{1}{c|}{Distance dans G entre $i$ et $j$}\\\hline
$d_e(i,j)$ & \mc{1}{c|}{Distance euclidienne entre $i$ et $j$}\\\hline
$N_k(u)$ & \mc{1}{c|}{Nombre de k-voisins de u }\\\hline
$N_G$ & \mc{1}{c|}{Degre de G}\\\hline
$d_G$ & \mc{1}{c|}{Distance de G}\\\hline
$d_e(G)$ & \mc{1}{c|}{Distance euclidienne de G}\\\hline
$diametre_G$ & \mc{1}{c|}{Diametre de G}\\\hline
$D_G$ & \mc{1}{c|}{Densité de G}\\\hline
$C(k)$ & \mc{1}{c|}{Cout de $k$ broadcasts}\\\hline

\end{tabular}
\end{center}
}%



\section{Analyse d'algorithme existants}\label{class}

Les reseaux de captuers sans fils constituent un domaine de recherche réscent et actif. Une grande quantité d'articles ont été publiés cette derniere décénie.Nous n'aborderons que quelques uns.



\subsection{Algorithmes sans balisage}

\paragraph{Bling Flooding}

Le blind flooding ou broadcast aveugle est un algortihme glouton de broadcast. Lors de la reception d'un message par un noeud, si c'est la premiere fois qu'il le recoit, il le broadcast à ses voivins(avec le rayon maximum), sinon il
 ne fait rien.

\textbf{Consomation et durée de vie}: Le cout global d'un broadcast est exactement le cout moyen puisque chaque noeud $i$ envoie un unique message <$M$,$\gamma$> par broadcast.
Le cout global d'un broadcast est $$C(1) = n \cdot E( \gamma )= n\cdot \gamma^\alpha +  n\cdot c $$
Le cout global de $k$ broadcast est $$C(k) = k\cdot n \cdot E( \gamma )= k\cdot n \cdot \gamma^\alpha +  k \cdot n\cdot c $$
La durée de vie du reseau est exactement de $$LT(Blind Flooding)=\lfloor \frac{\beta}{n\cdot \gamma^\alpha +  n\cdot c} \rceil$$
\paragraph{Probabilistic Flooding}

Afin d'eviter le redondance et les collisions, une idée est que chaque noeud retransmet le message suivant une probabilité $P$ lorsqu'il le reçoit pour la premiere fois.
Si $P=1$ cela equivaut au blind flooding.

\textbf{Consomation et durée de vie}: Chaque noeud ayant un probabilité $P$ de retransmettre le message <$M$,$\gamma$>, en moyenne $P\cdot n$ envoie ce message lors d'un broadcast.
Le cout moyen d'un broadcast est $$C(1) = P\cdot n \cdot E( \gamma ) $$
Le cout global de $k$ broadcast est $$C(k) = P\cdot k\cdot n \cdot E( \gamma ) $$
La durée de vie moyenne du reseau est  $$TTFF(Probabilistic Flooding)=\lfloor \frac{\beta}{P \cdot (n\cdot \gamma^\alpha +  n\cdot c)} \rceil$$



\paragraph{Algorithme ABBA}
'Area-based beaconless reliable broadcasting in
sensor networks'\cite{Abba2006}.

L'idée maitresse de ABBA est assez simple. Nous supposons que les noeuds n'ont aucunes connaissance de leur voisinage. Cepandant ceux ci connaissent leurs position géographique (GPS par exemple).
A la premiere réception d'un message, le noeud initialise un timer. Avant expiration du timer, le noeud peut recevoir d'autre copie du meme message. Chaque capteur a un rayon d'emission fixe $R$
et couvre une zone circulaire.
\begin{figure}[H]
\centering
\includegraphics{Etat_de_l'art/source/abba.png}
\caption{ }
\end{figure} 
 Si un noeud $u$ recoit le meme message de differente source et que ces sources couvrent sa zone, alors $u$ ne retransmet pas le message.
Cela signifie que chaqun de ses voisins potentiel a déjà reçu le message. Si un noeud est couvert avant que son timer n'expire, il ne fait rien. Sinon il retransmet.
Comme chaque couverture est un cercle de rayon $R$, le critere de couverture peut etre simplifié: au lieu de s'interesser au disque entier, un noeud verifie uniquement si le perimetre $\pi$ de sa zone est couvert par 
ses voisins lui ayant envoyé le message. 

\begin{algorithm}[h]
\caption{ABBA}
\label{ABBA}
\begin{algorithmic}
\REQUIRE:
Un noeud source $s$, un message $M$
\STATE $s$ envoie  <$M$,$s$,$position_s$,$R$> ;
\STATE Reception  par  $u$ de  <$M$,$v$,$position_v$,$R$>
\STATE $z_u\leftarrow ensemble_{vide}$ ;
\STATE Calculer la zone $z$ couverte par $v$ lors de la transmittion;
\STATE Déclancher le timer;
\REPEAT
    \STATE Attendre la reception d'un autre copie de $M$ ou que le timer expire;
    \IF {Une copie de $M$ est reçue}
	\STATE Mettre à jour $z_u$;
	\STATE reinitialiser le timer;
    \ENDIF
\UNTIL{timer expire;}
\IF {$\pi \nsubseteq z_u$}
    \STATE Retransmetre;
\ENDIF
     \STATE Ignorer les autres copies de M;

\end{algorithmic}
\end{algorithm}


\subsection{Algorthimes globaux}
\paragraph{Algorithme BIP}
Article \cite{Wieselthier2000}

  Rappelons les desavantages des transmitions longue portée: interférences, cout energetique ( le modele de consommation energetique des noeuds est non linéaire par rapport au rayon à cause de l'attenuation du signal radio).
C'est pourquoi il est necessaire de trouver le bon compromis entre le rayon de transmition et le nombre de messages circulant: un large rayon de transmittion coute cher mais atteind beaucoup de neouds; un court rayon cout tres peu cher mais 
augmente le nombre de messages. 

'Boadcast Incremental Protocol' et glouton et centralisé.Il se base sur l'algorithme de Prim: un algorithme permettant de construire un arbre couvrant minimal d'un graphe. Le principe de l'algorithme de Prim est de construire l'arbre couvrant minimal arête par arête: pour ajouter une 
arête à un arbre partiellement construit, il considère l'ensemble des arêtes dont une extrémité est
connectée à l'arbre déjà construit, et l'autre extrémité ne l'est pas, et
il choisit dans cet ensemble une arête de poids minimal qu'il ajoute à l'arbre. L'algorithme commence avec un arbre couvrant contenant un noeud et zéro arêtes, et ajoute successivement $n-1$ arêtes.

La formation d'un arbre couvrant de poids minimun dans BIP suit le meme principe dans le sens ou les aretes sont une par une ajoutées à l'arbre.
En fait, Bip utilise l'algorithme de Prim avec une difference fondamentale: au lieu d'utiliser des couts fixes $P_{ij}$ sur les aretes (demeurant inchangés au court de la procédure),
Bip actualise dynamiquement ces couts $P'_{ij}$ à chaques étapes ($i.e$ à chaque ajout d'une arete), ce qui traduit le fait que le cout d'ajout d'une arete depends des noeuds déja dans l'abre:

$$ \forall i \in BIP, \forall j \notin BIP, P'_{ij}=P_{ij}-P(i)$$
ou $P_{ij}$ est le cout reel de transmition et $P(i)$ le cout de broadcast de $i$ dans l'arbre ( $P(i)=0$ si $i$ est une feuille, $P(i)=\max\limits_{j\in N_1(i)\bigcap BIP}(E_ij)$ sinon ). $P'_{ij}$ represente donc le cout d'ajout de $j$ par un noeud $i$ appartenant au sous ensemble des feuilles
directes de $i$(ou $i$ lui meme si c'est une feuille). La paire $\{i,j\}$ minimisant $P'_{ij}$ est selectionnée et $i$ transmet à $j$. Ainsi, une nouveau arete est ajoutée a chaque etape de l'algorithme.\\



\begin{algorithm}[h]
\caption{Procédure de construction du BIP-Tree}
\label{algo_BIP_tree}
\begin{algorithmic}
\STATE ENTREES  $G=(V,E)$ un graphe connexe, $s$ une source, un cout de transmition $P_{ij}$
\STATE SORTIE  Arbre BIP de racine s
\STATE B : ENSEMBLE des arêtes de l'arbre
\STATE  $B \leftarrow arbre_{vide}$
\STATE Marquer $s$
\STATE Creer les nouveaux poids: $\forall j \notin BIP, P'_{sj}=P_{sj}-P(s)=P_{sj}$
\WHILE {il existe un sommet non marqué adjacent à un sommet marqué }
   \STATE Mettre à jour les poids:  $ \forall i \in BIP, \forall j \notin BIP, P'_{ij}=P'_{ij}-P(i)$
   \STATE Sélectionner un sommet j non marqué adjacent à un sommet marqué i tel que (i,j) est l'arête sortante de plus faible poids $P'_{ij}$
   \STATE $B := B\bigcup   {(i,j)}$
   \STATE Marquer $j$
\ENDWHILE
\STATE Retourner $B=(V,B)$
\end{algorithmic}
\end{algorithm}

Contairement a Prim qui garantie l'optimalité de l'abre couvrant en termes de cout total,
Bip ne construit pas forcement un arbre de poids minimum.Cepandant, contrairemnt à Prim, Bip exploite l'avantage notoire du mulicast dût aux transmitions radio. Un fois cet abre construit, le broadcast se fait naturellement via celui-ci.

\begin{figure}[H]
\centering
\includegraphics[scale=0.3]{Etat_de_l'art/source/Dessin2.pdf}
\caption{ Arbre Prim(gauche); Arbre Bip(droite)}
\end{figure} 

\begin{algorithm}[h]
\caption{BIP}
\label{algo_BIP}
\begin{algorithmic}
\STATE ENTREES  $G=(V,E)$ un graphe connexe, $s$ une source, un message $M$
\STATE SORTIE  BIP Broadcast
\STATE $s$ envoie $M$ à ses fils dans son Bip-tree
\STATE Lors de reception de $M$ par $i$:
  \IF {$i$ est un noeud} 
    \STATE Retransmettre $M$ à ses fils sinon ne rien faire
\ENDIF
\end{algorithmic}
\end{algorithm}


\subsection{Algorithmes avec balisage}
Comme expliqué en 2.1.3, dans les algorithmes avec balisage, tout capteur, lorsqu'il 'prend naissance' commence par une procédure d'initialisation et stocke en 
mémoire un certain nombre d'informations(voisins,groupe,topologie locale...). Au cour de l'algorithme, chaque noeud met périodiquement à jour ces informations. Pour ce faire chaque site envoie regulierement a ses voisins un message de type
'Hello' contenant par exemple son Id, sa position, sa dominante connexe, son degres, ses voisins, etc.\\
\paragraph{Decouverte 1,2-voisinnage}

La connaissance du 2-voisinage est un tres bon compromis conservant la localité du protocoles tout en minimisant le nombre de messages.


\begin{algorithm}[h]
\caption{Decouverte k-voisinnage}
\label{algo_k_voisinnage}
\begin{algorithmic}

\FOR{chaque noeud $i$}
	\STATE Broadcaster un message de type <HELLO,$i$> avec un rayon de transmittion $\gamma$
\ENDFOR

\STATE A la réception de <HELLO,$j$> , ajouter $j$ a son 1-voisinage.
\STATE Attendre $\Delta$
\FOR{chaque noeud $i$}
	\STATE Broadcaster <HELLO,$N_1(i)$,$i$>, message contenant $N_1(i)$ le 1-voisinage de $i$
	\STATE A la réception de <HELLO,$N_1(j)$,$j$> , ajouter $N_1(j)$ a son 2-voisinage.
	
\ENDFOR
\end{algorithmic}
\end{algorithm}

Complexité en messages: $O(2n)$.


\paragraph{Algorithme LBIP}  `Localized Broadcast Incremental Power Protocol for Wireless Ad Hoc Networks': article \cite{Ingelrest2004}
LBIP est l'application local de BIP: au lieu de construire l'arbre de diffusion BIP de facon centralisé,il le construit de facon locale.
Chaque site lorsqu'il recoit un message à retransmettre calcul son BIP-tree sur son 2-voisinage et diffuse le message par l'intermediaire de celui ci.

\begin{algorithm}[h]
\caption{LBIP}
\label{algo_LBIP}
\begin{algorithmic}
\STATE ENTREES  $G=(V,E)$ un graphe connexe, $s$ une source, un message $M$
\STATE SORTIE  LBIP Broadcast
\STATE REQUIE  Connaissance du 2-voisinage
\STATE $s$ calcul son arbre BIP($N_2(s),s,E_{ij}$) et diffuse <M,$s$> à ses fils
\IF{ $u$ recoit <M,$v$> :}
	\IF{Le paquet contient des instruction pour $u$}
		\STATE $u$ construit BIP($N_2(u),u,M$) est retransmet le message à ses fils
	\ENDIF
\ENDIF
\end{algorithmic}
\end{algorithm}

\begin{figure}[H]
\centering
\includegraphics[scale=0.65]{Etat_de_l'art/source/LBIP.png}
\caption{ }
\end{figure} 


\paragraph{Algorithme DLBIP}
`Dynamic Localized Broadcast Incremental Power Protocol for Wireless Ad Hoc Networks': article\cite{Champ2009DLBIP}.
DLBIP est une amélioration de LBIP. Le principe est de repartir l'energie consommée lors d'un broadcast en empreintant des chemins (arbre couvrants) différents en fonction de l'energie restantes des noeuds qui vont servir de relais.
A chaque broadcast, l'abre de diffusion est recalculé sur le meme graphe mais avec de nouveaux poids dépendants de l'energie de communication entre les noeuds ainsi que de l'energie propre à chaque noeud. Ce protocols permet que
le niveau d'energie propre à chaque noeud baisse globalement de façon identique et ainsi retarder un maximum la panne d'un capteur par manque d'energie.
DLBIP actualise dynamiquement ces couts $P'_{ij}$ à chaques broadcast:
$$ \forall i,j \in V, P'_{ij}=\frac{E_{ij}}{E_i}$$
ou $E_{ij}$ est le cout reel de transmition et $E_i$ l'energie restante de $i$.


\begin{algorithm}[h]
\caption{DLBIP}
\label{algo_DLBIP}
\begin{algorithmic}
\STATE ENTREES  $G=(V,E)$ un graphe connexe, $s$ une source, un message $M$
\STATE SORTIE  DLBIP Broadcast
\STATE REQUIE  Connaissance du 2-voisinage
\STATE $s$ calcul son BIP($N_2(s),s,P'_{ij}$) et diffuse <M,$s$> à ses fils
\IF{ $u$ recoit <M,$v$> :}
	\IF{Le paquet contient des instruction pour $u$}
		\STATE $u$ construit BIP($N_2(u),u,P'_{ij}$) est retransmet le message à ses fils
	\ENDIF
\ENDIF
\end{algorithmic}
\end{algorithm}



\paragraph{Algorithme RRS}
\cite{Cartigny2003RNG}


\subsubsection{Algorithmes hexagonaux}


\paragraph{Rayon Optimal}


\begin{myth}
Sans chevauchement et sans vide, un plan ne peut etre découpé de facon uniforme que par des polygones reguliers de type triangle, carrés ou hexagones.
\end{myth}
\begin{proof}
 Soit $m$ le nombre de sommet d'un $m$-polygone et $n$ le nombre de $m$-polygones nécessaire pour couvrir $2\pi$ degrés
Nous avons: $$\frac{(m-2)n\pi}{m}=2\pi \Leftrightarrow (m-2)(n-2)=4$$
Comme $n$ et $m$ sont des entiers, les seuls solutions sont: $$(m-2;n-2)\in\{(1,4),(2,2),(4,1) \} \Leftrightarrow m \in \{ 3,4,6 \}$$
\end{proof}
Nous admetrons:
\begin{myth}
 Le quadrillage en hexagone est celui offrant le moins de chevauchement du point de vu WSN.
\end{myth}
\begin{figure}[H]
\centering
\includegraphics[scale=0.7]{Etat_de_l'art/source/hexagone1.png}
\caption{ Chevauchement d'un maillage hexagonale}
\end{figure} 

Soit $P$ un plan sur lequel $n$ capteurs sont placés. Chaque capteur peut émettre des message avec un rayon compris entre 0 et $\gamma$ .Dans ce protocol, tout les noeuds auront un meme rayon d'émission fixe $R$.
Etant donnée une source $s$ et un message $M$ à broadcaster, nous devons placer les noeuds relais de facon a minimiser leur nombre $m$. Biensur leur nombre dépend directement du rayon $R$.
 

Dans un reseau hexagonale, nous avons les resultats suivants:
Soit $S$ l'aire du plan rectangulaire $P$. Connaissant $R$, nous pouvons calculer facilement le nombre de sommet pour couvrir le plan.
Soit $h$ le nombre d'hexagones couvrant $P$: 
Knowing r is the exact distance between two emitting
nodes, we can easily compute the necessary quantity of them
to cover the entire area. To do this, we just have to find how
many hexagons, denoted by h, fit on our area of surface S:
$$h \simeq \frac{Surface ( P)}{Surface(hexagone)}=\frac{2S}{3R^2 \sqrt{3}}$$

Comme il faut deux noeuds par hexagone,$$n=2h=\frac{4S}{3R^2 \sqrt{3}}= \frac{k}{R^2}$$ où $k=\frac{4S}{3 \sqrt{3}}$

Ainsi, le cout d'un broadcast vaut: $$C(1)(R)= n\cdot E(R)=\frac{k}{R^2}\cdot E(R)=\frac{k}{R^2}\cdot (R^\alpha+c)$$
Nous cherchons le rayon optimal minimisant $C(1)(R)$. Comme $\alpha\geq 2$, $c\geq 0$ et $R>0$, nous avons 4 cas possibles:
\begin{itemize}
 \item $\alpha=2$, $c=0$: nous avons $C(1)(R)=k$. $R_{opt}$ ne depend pas de $r$.
 \item $\alpha=2$, $c\neq0$: nous avons $C(1)(R)=k(1+cR^{-2})$. Au plus le rayon doit etre le plus gran possible: $R_{opt}=\gamma$
 \item $\alpha>2$, $c=0$: nous avons $C(1)(R)=kR^{\alpha-2}$. $R_{opt}=0$
 \item $\alpha>2$, $c\neq 0$: nous avons $C(1)(R)=k(R^{\alpha-2} + c R^{-2} ) $.\\
 En derivant, nous obtenons: $C'(1)(R)= k( (\alpha 2) R^{\alpha-3}- 2cR^{-3} ) $.\\
D'ou: $$R_{opt}=\sqrt[\alpha]{\frac{2c}{\alpha-2}}$$
\end{itemize}

Biensur, en pratique, il est impossible sur un topologie quelquonces d'extraire un tel maillage hexagonale. Cependant, l'idée des algorithmes de broadcast est de choisir les noeuds relais de façon à ce que leur ensemnble se rapproche 
au maximum d'un tel maillage.

\paragraph{TR-LBOP}
'Target Transmission Radius over LMST for Energy-Efficient Broadcast Protocol in Ad Hoc Networks':\cite{Ingelrest2004}.\\
\paragraph{DMTB}
'Distributed Mobility Transparent Broadcast inMobile Ad Hoc Networks': \cite{Yang2006}.\\








\subsection{Elements de classification}
Les éléments de classification cités ci dessous sont inspirés des articles \cite{stojmenovic2004},\cite{ingelrest2005},\cite{wu2003}
\begin{enumerate}
 \item  \textbf{Extensibilité}: Pour qu'un protocol soit extensible, il doit etre avant tout distribué et local: le comportement de chaque noeud bien qu'il
nécessite qu'une connaissance locale du reseau, permet d'atteindre l'objectif global. Il est facile d'admettre que l'extensibilité d'un WSN est inversement proportionelle à la localité du protocol. 
 \item  \textbf{Deterministe vs probabiliste}: Un protocol de broadcast peut utiliser des fonctions probabilistes pour prendre certaines descisions de maniere aléatoire.
 \item  \textbf{Rayon d'émission}:  rayon fixe ou variable
 \item  \textbf{Avec ou sans balisage}:  
 \item  \textbf{hello msg}  
 \item  \textbf{Principe} 
\end{enumerate}



\subsection{Synthèse}

\begin{figure}[H]
\centering
\includegraphics[scale=0.8]{Etat_de_l'art/source/classification}
\caption{ Graphe de synthèse}
\end{figure} 






\section{Nos idées}

\subsection{Application du rayon optimal à DLBIP}
\begin{algorithm}[h]
\caption{DLBIP avec rayon optimal}
\label{algo_DLBIP}
\begin{algorithmic}
\STATE ENTREES  $G=(V,E)$ un graphe connexe, $s$ une source, un message $M$
\STATE SORTIE  DLBIP Broadcast
\STATE REQUIE  Connaissance du 2-voisinage
\STATE $R_{opt}=\sqrt[\alpha]{\frac{2c}{\alpha-2}}$
\STATE $s$ calcul son BIP($N_2(s),s,P'_{ij}$) et diffuse <M,$s$> à ses fils
\IF{ $u$ recoit <M,$v$> :}
	\IF{Le paquet contient des instruction pour $u$}
		\STATE $u$ construit BIP($N_2(u),u,P'_{ij}$) est retransmet le message à ses fils avec pour rayon:
			  \STATE - $R_{opt}$ si $\max\limits_{v\in N_u(1)\bigcap BIP(N_2(u),u,P'_{ij}}(d_e(u,v)< R_{opt}$
			  \STATE - $\max\limits_{v\in N_u(1)\bigcap BIP(N_2(u),u,P'_{ij}}(d_e(u,v)$ sinon.
			  
	\ENDIF
\ENDIF
\end{algorithmic}
\end{algorithm}

\subsection{}









